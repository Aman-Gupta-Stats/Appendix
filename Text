import pandas as pd
from datetime import datetime

def multi_period_distribution(
    df: pd.DataFrame,
    vintages: list[int],
    value_col: str = "txn_units"
) -> pd.DataFrame:
    """
    Returns a MultiIndex-column DataFrame with Benchmark + all requested vintage months.

    Parameters
    ----------
    df : pd.DataFrame
        Must contain columns ['bench_monit_tag','vintage','score_band',value_col].
    vintages : list of int
        List of vintage codes (e.g. [20220630, 20220730]) to pull Monitoring for.
    value_col : str
        Numeric column to sum (e.g. 'txn_units', 'txn_amt').

    Returns
    -------
    pd.DataFrame
        Indexed by score_band, with first-level cols = ['Benchmark', <Mon’YY>…],
        second-level = ['Txn Amount','%Txn Amt.'].
    """
    def _make_block(df_slice: pd.DataFrame, lvl0: str) -> pd.DataFrame:
        grp = df_slice.groupby("score_band", sort=True)[value_col].sum()
        total = grp.sum()
        pct  = (grp / total * 100).round(2)
        # build block with MultiIndex cols
        cols = pd.MultiIndex.from_product([[lvl0], ["Txn Amount", "%Txn Amt."]])
        block = pd.DataFrame(
            { (lvl0, "Txn Amount"): grp,
              (lvl0, "%Txn Amt."): pct },
            index=grp.index
        )
        block.columns = cols
        return block

    blocks = []
    # 1) Benchmark block
    bench_df = df[df["bench_monit_tag"] == "Benchmark"]
    blocks.append(_make_block(bench_df, "Benchmark"))

    # 2) One block per vintage
    for v in vintages:
        mon_df = df[
            (df["bench_monit_tag"] == "Monitoring") &
            (df["vintage"] == v)
        ]
        s = str(v)
        # Infer month-year label: take first 6 digits (YYYYMM) if available
        if len(s) >= 6:
            dt = datetime.strptime(s[:6], "%Y%m")
            label = dt.strftime("%b'%y")
        else:
            label = s
        blocks.append(_make_block(mon_df, label))

    # 3) Concatenate all blocks side by side
    result = pd.concat(blocks, axis=1)
    result.index.name = "score_band"
    return result






    # --- new extra-cols logic -----------------------------------------------
    if extra:
        # grab one row per score_band for each extra col
        meta = (
            df_slice
            .loc[:, ["score_band"] + extra]
            .drop_duplicates(subset="score_band")
            .set_index("score_band")
        )
        # turn meta’s columns into the same MultiIndex level structure
        meta.columns = pd.MultiIndex.from_product(
            [[lvl0], extra],
            names=[None, None]
        )
        # join it onto our block
        block = block.join(meta, how="left")
    # ------------------------------------------------------------------------

