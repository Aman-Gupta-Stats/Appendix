from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Tokenize and pad
tokenizer = Tokenizer(num_words=10000, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)
train_seq = tokenizer.texts_to_sequences(X_train)
test_seq = tokenizer.texts_to_sequences(X_test)
maxlen = 200  # maximum sequence length
X_train_seq = pad_sequences(train_seq, maxlen=maxlen)
X_test_seq = pad_sequences(test_seq, maxlen=maxlen)

# Build LSTM model
model = Sequential()
model.add(Embedding(input_dim=10000, output_dim=128, input_length=maxlen))
model.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

# Train
model.fit(X_train_seq, y_train, epochs=5, batch_size=32, validation_split=


model = Sequential()
model.add(Embedding(input_dim=vocab_size, output_dim=128))
model.add(Bidirectional(LSTM(128, return_sequences=True)))
model.add(Dropout(0.3))
model.add(BatchNormalization())

model.add(LSTM(64))
model.add(Dropout(0.3))
model.add(BatchNormalization())

model.add(Dense(32, activation=‘relu’))
model.add(Dropout(0.3))
model.add(Dense(1, activation=‘sigmoid’))





