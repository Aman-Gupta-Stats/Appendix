import json
from io import BytesIO

import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter

# ————————————————
# 1) load your config
# ————————————————
backend_config_path = "path/to/your/backend_config.json"
with open(backend_config_path, 'r') as f:
    full_cfg = json.load(f)
fmt_cfg = full_cfg['preprocess_vars']   # exactly as in your snippet

# ————————————————
# 2) build a helper that maps a multi-index column→Excel format code
# ————————————————
def excel_format_from_cfg(col_tuple):
    """
    col_tuple is a (level0, level1) from your MultiIndex.
    We use level1 to pick up the JSON config exactly as you did.
    """
    lvl1 = col_tuple[1]
    cfg  = fmt_cfg.get(lvl1)
    if not cfg:
        return None

    if cfg["format"] == "percent":
        # e.g. precision = 2 → "0.00%"
        prec = cfg.get("precision", 2)
        return f"0.{''.join(['0']*prec)}%"

    if cfg["format"] == "int":
        # comma as thousands separator, no decimals
        return "#,##0"

    # add more mappings here if you extend your JSON
    return None

# ————————————————
# 3) write the DataFrame raw, then reopen & apply
# ————————————————
# your `result` is the DataFrame with a MultiIndex:
#    result = <whatever you built upstream>

# STEP A: dump raw numbers
buffer = BytesIO()
with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
    result.to_excel(writer, sheet_name="Report", index=True)  # or False if you don’t want the index
buffer.seek(0)

# STEP B: reopen and assign number_formats
wb = load_workbook(buffer)
ws = wb["Report"]

# build a map col_name→Excel format code
excel_formats = {}
for idx, col in enumerate(result.columns, start=1):
    fmt_code = excel_format_from_cfg(col)
    if fmt_code:
        excel_formats[col] = fmt_code

# now loop each column’s cells (skip header row #1)
for col_idx, col in enumerate(result.columns, start=1):
    if col in excel_formats:
        fmt = excel_formats[col]
        letter = get_column_letter(col_idx + (1 if ws.max_column > len(result.columns) else 0))
        # if you wrote index=True, your data columns start at B, so you may need +1
        for cell in ws[letter][1:]:
            cell.number_format = fmt

# ————————————————
# 4) your merge/delete dance
# ————————————————
# copy the value from A3 into A1, delete row 3, then merge A1:A2
ws["A1"] = ws["A3"].value
ws.delete_rows(3)
ws.merge_cells(start_row=1, start_column=1, end_row=2, end_column=1)

# ————————————————
# 5) save out
# ————————————————
wb.save("final_report.xlsx")